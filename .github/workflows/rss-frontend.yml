on:
  release:
    types: [created]

name: Deploy to Amazon ECS

jobs:
  deploy:
    name: rss-front-deploy
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: 855430746673.dkr.ecr.us-east-1.amazonaws.com
        ECR_REPOSITORY: rss-frontend
        IMAGE_TAG: ${{ github.sha }} 
      run: |-
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  # Build the Docker image
    - name: Build
      run: |-
          docker build \
            --tag "855430746673.dkr.ecr.us-east-1.amazonaws.com/matt-oberlies-00000916-/$APP_NAME:rss-frontend-tag" \
        # Configure Docker to use the gcloud command-line tool as a credential
        # helper for authentication
    - name: AWS Configure Docker
      run: |-
          AWS_ACCESS_KEY=${{ secrets.ECR_ACCESS_KEY }} ECR_SECRET_KEY=${{ secrets.ECR_SECRET_KEY }} aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 855430746673.dkr.ecr.us-east-1.amazonaws.com
          - name: Publish # Push the Docker image to ECR  
          run: |-
          docker push "855430746673.dkr.ecr.us-east-1.amazonaws.com/matt-oberlies-00000916-/${{ secrets.APP_NAME }}:rss-front-tag"
          - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: task-definition.json
            container-name: rss-front-container
            image: ${{ steps.build-image.outputs.image }}
           - name:Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: sample-app-service
            cluster: default
            wait-for-service-stability: true
